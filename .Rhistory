labs(fill="Frequency", x = "Activity") +
coord_flip() +
theme_minimal()+
ggtitle("Trip frequency by motive before social distancing") +
scale_fill_brewer(palette="PuBu")+
theme(legend.position="bottom", legend.title = element_text(size = 15), legend.text = element_text(size = 15), axis.text.y = element_text(size = 15))+
scale_y_continuous(labels = scales::percent, name = NULL)
stack_before_trip_motive
stack_before_trip_motive <- ggplot(data_plot_a1, aes(x=variable, fill=value, y=))+
geom_bar(position = "fill") +
labs(fill="Frequency", x = "Activity") +
coord_flip() +
theme_minimal()+
ggtitle("Trip frequency by motive before social distancing") +
scale_fill_brewer(palette="PuBu")+
theme(legend.position="bottom", legend.title = element_text(size = 15), legend.text = element_text(size = 15), axis.text.y = element_text(size = 15), axis.text.x = element_text(size = 15))+
scale_y_continuous(labels = scales::percent, name = NULL)
stack_before_trip_motive
stack_before_trip_motive <- ggplot(data_plot_a1, aes(x=variable, fill=value, y=))+
geom_bar(position = "fill") +
labs(fill="Frequency") +
coord_flip() +
theme_minimal()+
ggtitle("Trip frequency by motive before social distancing") +
scale_fill_brewer(palette="PuBu")+
theme(legend.position="bottom", legend.title = element_text(size = 15), legend.text = element_text(size = 15), axis.text.y = element_text(size = 15), axis.text.x = element_text(size = 15))+
scale_y_continuous(labels = scales::percent, name = NULL)
stack_before_trip_motive
stack_before_trip_motive <- ggplot(data_plot_a1, aes(x=variable, fill=value, y=))+
geom_bar(position = "fill") +
labs(fill="Frequency", x = NULL) +
coord_flip() +
theme_minimal()+
ggtitle("Trip frequency by motive before social distancing") +
scale_fill_brewer(palette="PuBu")+
theme(legend.position="bottom", legend.title = element_text(size = 15), legend.text = element_text(size = 15), axis.text.y = element_text(size = 15), axis.text.x = element_text(size = 15))+
scale_y_continuous(labels = scales::percent, name = NULL)
stack_before_trip_motive
stack_before_trip_motive <- ggplot(data_plot_a1, aes(x=variable, fill=value, y=))+
geom_bar(position = "fill") +
labs(fill="Frequency", x = NULL) +
coord_flip() +
theme_minimal()+
scale_fill_brewer(palette="PuBu")+
theme(legend.position="bottom", legend.title = element_text(size = 15), legend.text = element_text(size = 15), axis.text.y = element_text(size = 15), axis.text.x = element_text(size = 15))+
scale_y_continuous(labels = scales::percent, name = NULL)
stack_before_trip_motive
stack_before_trip_motive <- ggplot(data_plot_a1, aes(x=variable, fill=value, y=))+
geom_bar(position = "fill") +
labs(fill="Frequency", x = NULL) +
coord_flip() +
theme_minimal()+
scale_fill_brewer(palette="PuBu")+
theme(legend.title = element_text(size = 15), legend.text = element_text(size = 15), axis.text.y = element_text(size = 15), axis.text.x = element_text(size = 15))+
scale_y_continuous(labels = scales::percent, name = NULL)
stack_before_trip_motive
stack_before_trip_motive <- ggplot(data_plot_a1, aes(x=variable, fill=value, y=))+
geom_bar(position = "fill") +
labs(fill="Frequency", x = NULL) +
#coord_flip() +
theme_minimal()+
scale_fill_brewer(palette="PuBu")+
theme(legend.position="bottom", legend.title = element_text(size = 15), legend.text = element_text(size = 15), axis.text.y = element_text(size = 15), axis.text.x = element_text(size = 15))+
scale_y_continuous(labels = scales::percent, name = NULL)
stack_before_trip_motive
stack_before_trip_motive <- ggplot(data_plot_a1, aes(x=variable, fill=value, y=))+
geom_bar(position = "fill") +
labs(fill="Frequency", x = NULL) +
coord_flip() +
theme_minimal()+
scale_fill_brewer(palette="PuBu")+
theme(legend.position="bottom", hjust = 1, legend.title = element_text(size = 15), legend.text = element_text(size = 15), axis.text.y = element_text(size = 15), axis.text.x = element_text(size = 15))+
scale_y_continuous(labels = scales::percent, name = NULL)
stack_before_trip_motive
stack_before_trip_motive <- ggplot(data_plot_a1, aes(x=variable, fill=value, y=))+
geom_bar(position = "fill") +
labs(fill="Frequency", x = NULL) +
coord_flip() +
theme_minimal()+
scale_fill_brewer(palette="PuBu")+
theme(legend.position="bottom", legend.title = element_text(size = 12), legend.text = element_text(size = 12), axis.text.y = element_text(size = 15), axis.text.x = element_text(size = 15))+
scale_y_continuous(labels = scales::percent, name = NULL)
stack_before_trip_motive
ggdraw(align_legend(stack_before_trip_motive))
library(cowplot)
ggdraw(align_legend(stack_before_trip_motive))
library(cowplot)
p <- stack_before_trip_motive
ggdraw(align_legend(p, hjust = 1))
stack_before_trip_motive <- ggplot(data_plot_a1, aes(x=variable, fill=value, y=))+
geom_bar(position = "fill") +
labs(fill="Frequency", x = NULL) +
coord_flip() +
theme_minimal()+
scale_fill_brewer(palette="PuBu")+
theme(legend.position="bottom", legend.title = element_text(size = 12), legend.title.align = 0.5, legend.text = element_text(size = 12), axis.text.y = element_text(size = 15), axis.text.x = element_text(size = 15))+
scale_y_continuous(labels = scales::percent, name = NULL)
stack_before_trip_motive
stack_before_trip_motive <- ggplot(data_plot_a1, aes(x=variable, fill=value, y=))+
geom_bar(position = "fill") +
labs(fill="Frequency", x = NULL) +
coord_flip() +
theme_minimal()+
scale_fill_brewer(palette="PuBu")+
theme(legend.position="bottom", legend.title = element_text(size = 12), legend.title.align = 1, legend.text = element_text(size = 12), axis.text.y = element_text(size = 15), axis.text.x = element_text(size = 15))+
scale_y_continuous(labels = scales::percent, name = NULL)
stack_before_trip_motive
stack_before_trip_motive <- ggplot(data_plot_a1, aes(x=variable, fill=value, y=))+
geom_bar(position = "fill") +
labs(fill="Frequency", x = NULL) +
coord_flip() +
theme_minimal()+
scale_fill_brewer(palette="PuBu")+
theme(legend.position="bottom", legend.title = element_text(size = 12), legend.title.align = -0.5, legend.text = element_text(size = 12), axis.text.y = element_text(size = 15), axis.text.x = element_text(size = 15))+
scale_y_continuous(labels = scales::percent, name = NULL)
stack_before_trip_motive
stack_before_trip_motive <- ggplot(data_plot_a1, aes(x=variable, fill=value, y=))+
geom_bar(position = "fill") +
labs(fill="Frequency", x = NULL) +
coord_flip() +
theme_minimal()+
scale_fill_brewer(palette="PuBu")+
theme(legend.position="bottom", legend.title = element_text(size = 12), legend.title.align = -0.5, legend.justification = "center", legend.text = element_text(size = 12), axis.text.y = element_text(size = 15), axis.text.x = element_text(size = 15))+
scale_y_continuous(labels = scales::percent, name = NULL)
stack_before_trip_motive
align_legend <- function(p, hjust = 0.5)
{
# extract legend
g <- cowplot::plot_to_gtable(p)
grobs <- g$grobs
legend_index <- which(sapply(grobs, function(x) x$name) == "guide-box")
legend <- grobs[[legend_index]]
# extract guides table
guides_index <- which(sapply(legend$grobs, function(x) x$name) == "layout")
# there can be multiple guides within one legend box
for (gi in guides_index) {
guides <- legend$grobs[[gi]]
# add extra column for spacing
# guides$width[5] is the extra spacing from the end of the legend text
# to the end of the legend title. If we instead distribute it by `hjust:(1-hjust)` on
# both sides, we get an aligned legend
spacing <- guides$width[5]
guides <- gtable::gtable_add_cols(guides, hjust*spacing, 1)
guides$widths[6] <- (1-hjust)*spacing
title_index <- guides$layout$name == "title"
guides$layout$l[title_index] <- 2
# reconstruct guides and write back
legend$grobs[[gi]] <- guides
}
# reconstruct legend and write back
g$grobs[[legend_index]] <- legend
g
}
#Usar função align_legend
stack_before_trip_motive <- ggplot(data_plot_a1, aes(x=variable, fill=value, y=))+
geom_bar(position = "fill") +
labs(fill="Frequency", x = NULL) +
coord_flip() +
theme_minimal()+
scale_fill_brewer(palette="PuBu")+
theme(legend.position="bottom", legend.title = element_text(size = 12), legend.title.align = -0.5, legend.justification = "center", legend.text = element_text(size = 12), axis.text.y = element_text(size = 15), axis.text.x = element_text(size = 15))+
scale_y_continuous(labels = scales::percent, name = NULL)
p <- stack_before_trip_motive
ggdraw(align_legend(p, hjust = 1))
stack_before_trip_motive
ggdraw(align_legend(p, hjust = 2))
stack_before_trip_motive
#Usar função align_legend
stack_before_trip_motive <- ggplot(data_plot_a1, aes(x=variable, fill=value, y=))+
geom_bar(position = "fill") +
labs(fill="Frequency", x = NULL) +
coord_flip() +
theme_minimal()+
scale_fill_brewer(palette="PuBu")+
theme(legend.position="bottom", legend.title = element_text(size = 12), legend.title.align = -0.5, legend.direction = "vertical", legend.justification = "center", legend.text = element_text(size = 12), axis.text.y = element_text(size = 15), axis.text.x = element_text(size = 15))+
scale_y_continuous(labels = scales::percent, name = NULL)
p <- stack_before_trip_motive
ggdraw(align_legend(p, hjust = 2))
stack_before_trip_motive
p
ggdraw(align_legend(p))
p
#Usar função align_legend
stack_before_trip_motive <- ggplot(data_plot_a1, aes(x=variable, fill=value, y=))+
geom_bar(position = "fill") +
labs(fill="Frequency", x = NULL) +
coord_flip() +
theme_minimal()+
scale_fill_brewer(palette="PuBu")+
theme(legend.position="bottom", legend.title = element_text(size = 12), legend.title.align = -0.5, legend.direction = "vertical", legend.justification = "center", legend.text = element_text(size = 12), axis.text.y = element_text(size = 15), axis.text.x = element_text(size = 15))+
scale_y_continuous(labels = scales::percent, name = NULL)
stack_before_trip_motive
#Usar função align_legend
stack_before_trip_motive <- ggplot(data_plot_a1, aes(x=variable, fill=value, y=))+
geom_bar(position = "fill") +
labs(fill="Frequency", x = NULL) +
coord_flip() +
theme_minimal()+
scale_fill_brewer(palette="PuBu")+
theme(legend.position="bottom", legend.title = element_text(size = 12), legend.title.align = 0, legend.direction = "vertical", legend.justification = "center", legend.text = element_text(size = 12), axis.text.y = element_text(size = 15), axis.text.x = element_text(size = 15))+
scale_y_continuous(labels = scales::percent, name = NULL)
stack_before_trip_motive
#Usar função align_legend
stack_before_trip_motive <- ggplot(data_plot_a1, aes(x=variable, fill=value, y=))+
geom_bar(position = "fill") +
labs(fill="Frequency", x = NULL) +
coord_flip() +
theme_minimal()+
scale_fill_brewer(palette="PuBu")+
theme(legend.position="bottom", legend.title = element_text(size = 15), legend.title.align = 0, legend.direction = "vertical", legend.justification = "center", legend.text = element_text(size = 15), axis.text.y = element_text(size = 15), axis.text.x = element_text(size = 15))+
scale_y_continuous(labels = scales::percent, name = NULL)
stack_before_trip_motive
stack_after_trip_motive <- ggplot(data_plot_b1, aes(x=variable, fill=value, y=))+
geom_bar(position = "fill") +
labs(fill="Frequency", x = "Activity") +
coord_flip() +
ggtitle("Trip frequency by motive during social distancing") +
scale_fill_brewer(palette="PuBu")+
theme_minimal()+
theme(legend.position="bottom", legend.title = element_text(size = 15), legend.title.align = 0, legend.direction = "vertical", legend.justification = "center", legend.text = element_text(size = 15), axis.text.y = element_text(size = 15), axis.text.x = element_text(size = 15))+
scale_y_continuous(labels = scales::percent, name = NULL)
stack_after_trip_motive
stack_after_trip_motive <- ggplot(data_plot_b1, aes(x=variable, fill=value, y=))+
geom_bar(position = "fill") +
labs(fill="Frequency", x = NULL) +
coord_flip() +
scale_fill_brewer(palette="PuBu")+
theme_minimal()+
theme(legend.position="bottom", legend.title = element_text(size = 15), legend.title.align = 0, legend.direction = "vertical", legend.justification = "center", legend.text = element_text(size = 15), axis.text.y = element_text(size = 15), axis.text.x = element_text(size = 15))+
scale_y_continuous(labels = scales::percent, name = NULL)
stack_after_trip_motive
stack_before_mode <- ggplot(data_plot_c1, aes(x=variable, fill=value, y=))+
geom_bar(position = "fill") +
labs(fill="Frequency", x = NULL) +
coord_flip() +
theme_minimal()+
scale_fill_brewer(palette="PuBu")+
theme(legend.position="bottom", legend.title = element_text(size = 15), legend.title.align = 0, legend.direction = "vertical", legend.justification = "center", legend.text = element_text(size = 15), axis.text.y = element_text(size = 15), axis.text.x = element_text(size = 15))+
scale_y_continuous(labels = scales::percent, name = NULL)
stack_before_mode
stack_after_mode <- ggplot(data_plot_d1, aes(x=variable, fill=value, y=))+
geom_bar(position = "fill") +
labs(fill="Frequency", x = NULL) +
coord_flip() +
theme_minimal()+
scale_fill_brewer(palette="PuBu")+
theme(legend.position="bottom", legend.title = element_text(size = 15), legend.title.align = 0, legend.direction = "vertical", legend.justification = "center", legend.text = element_text(size = 15), axis.text.y = element_text(size = 15), axis.text.x = element_text(size = 15))+
scale_y_continuous(labels = scales::percent, name = NULL)
stack_after_mode
library(readr)
sc_censo <- read_delim("F:/Google Drive/10_extensao/uft/03_dados/shapes/sc_censo.txt",
";", escape_double = FALSE, trim_ws = TRUE)
View(sc_censo)
View(sc_censo)
data_sc <- sc_censo[,c(1,11:165)]
View(data_sc)
data_sc <- mutate(data_sc, cod = as.integer(Cod_setor))
View(data_sc)
data_sc <- mutate(data_sc, cod = as.numeric(Cod_setor))
View(data_sc)
24-9
43+38
118+9
208+14
349+26
install.packages("wordcloud")
library(wordcloud)
install.packages("RColorBrewer")
library(RColorBrewer)
install.packages("wordcloud2)
library(wordcloud2)
install.packages("wordcloud2)
install.packages("wordcloud2")
install.packages("wordcloud")
install.packages("tm")
library(tm)
install.packages("SnowballC")
knitr::opts_chunk$set(echo = TRUE)
text <- readLines(file.choose("F:/Google Drive/02_pesquisa/01_projetos/2020/07_transport_policy/produtos/Covid_full_paper_20200730.docx"))
docs <- Corpus(VectorSource(text))
inspect(docs)
toSpace <- content_transformer(function (x , pattern ) gsub(pattern, " ", x))
docs <- tm_map(docs, toSpace, "/")
docs <- tm_map(docs, toSpace, "@")
docs <- tm_map(docs, toSpace, "\\|")
# Convert the text to lower case
docs <- tm_map(docs, content_transformer(tolower))
# Remove numbers
docs <- tm_map(docs, removeNumbers)
# Remove english common stopwords
docs <- tm_map(docs, removeWords, stopwords("english"))
# Remove your own stop word
# specify your stopwords as a character vector
docs <- tm_map(docs, removeWords, c("blabla1", "blabla2"))
# Remove punctuations
docs <- tm_map(docs, removePunctuation)
# Eliminate extra white spaces
docs <- tm_map(docs, stripWhitespace)
# Text stemming
# docs <- tm_map(docs, stemDocument)
dtm <- TermDocumentMatrix(docs)
m <- as.matrix(dtm)
v <- sort(rowSums(m),decreasing=TRUE)
d <- data.frame(word = names(v),freq=v)
head(d, 10)
View(d)
set.seed(1234)
wordcloud(words = d$word, freq = d$freq, min.freq = 1,
max.words=200, random.order=FALSE, rot.per=0.35,
colors=brewer.pal(8, "Dark2"))
install.packages(c("tm", "SnowballC", "wordcloud", "RColorBrewer", "RCurl", "XML")
install.packages(c("tm", "SnowballC", "wordcloud", "RColorBrewer", "RCurl", "XML"))
install.packages(c("tm", "SnowballC", "wordcloud", "RColorBrewer", "RCurl", "XML"))
install.packages(c("tm", "SnowballC", "wordcloud", "RColorBrewer", "RCurl", "XML"))
install.packages(c("tm", "SnowballC", "wordcloud", "RColorBrewer", "RCurl", "XML"))
install.packages(c("tm", "SnowballC", "wordcloud", "RColorBrewer", "RCurl", "XML"))
install.packages(c("tm", "SnowballC", "wordcloud", "RColorBrewer", "RCurl", "XML"))
install.packages(c("tm", "SnowballC", "wordcloud", "RColorBrewer", "RCurl", "XML"))
install.packages(c("tm", "SnowballC", "wordcloud", "RColorBrewer", "RCurl", "XML"))
install.packages(c("tm", "SnowballC", "wordcloud", "RColorBrewer", "RCurl", "XML"))
install.packages(c("tm", "SnowballC", "wordcloud", "RColorBrewer", "RCurl", "XML"))
install.packages(c("tm", "SnowballC", "wordcloud", "RColorBrewer", "RCurl", "XML"))
knitr::opts_chunk$set(echo = TRUE)
library(c("tm", "SnowballC", "wordcloud", "RColorBrewer", "RCurl", "XML"))
library("tm")
library("SnowballC")
library("wordcloud")
library("RColorBrewer")
library("RCurl")
library("XML")
text <- readLines(file.choose("F:/Google Drive/02_pesquisa/01_projetos/2020/07_transport_policy/produtos/Covid_full_paper_20200730.docx"))
text <- readLines(file.choose())
docs <- Corpus(VectorSource(text))
inspect(docs)
# Convert the text to lower case
docs <- tm_map(docs, content_transformer(tolower))
# Remove numbers
docs <- tm_map(docs, removeNumbers)
# Remove english common stopwords
docs <- tm_map(docs, removeWords, stopwords("english"))
# Remove your own stop word
# specify your stopwords as a character vector
docs <- tm_map(docs, removeWords, c("blabla1", "blabla2"))
# Remove punctuations
docs <- tm_map(docs, removePunctuation)
# Eliminate extra white spaces
docs <- tm_map(docs, stripWhitespace)
# Text stemming
# docs <- tm_map(docs, stemDocument)
dtm <- TermDocumentMatrix(docs)
m <- as.matrix(dtm)
v <- sort(rowSums(m),decreasing=TRUE)
d <- data.frame(word = names(v),freq=v)
head(d, 10)
set.seed(1234)
wordcloud(words = d$word, freq = d$freq, min.freq = 1,
max.words=200, random.order=FALSE, rot.per=0.35,
colors=brewer.pal(8, "Dark2"))
res<-rquery.wordcloud(filePath, type ="file", lang = "english")
res<-rquery.wordcloud(d, type ="file", lang = "english")
res<-rquery.wordcloud(text, type ="file", lang = "english")
res<-rquery.wordcloud(docs, type ="file", lang = "english")
View(d)
View(d)
res<-rquery.wordcloud(m, type ="file", lang = "english")
filePath <- "F:/Google Drive/02_pesquisa/01_projetos/2020/07_transport_policy/produtos/cloud.txt"
res<-rquery.wordcloud(filePath, type ="file", lang = "english")
library("tm")
library("SnowballC")
library("wordcloud")
library("RColorBrewer")
library("RCurl")
library("XML")
source('http://www.sthda.com/upload/rquery_wordcloud.r')
res<-rquery.wordcloud(filePath, type ="file", lang = "english")
res<-rquery.wordcloud(filePath, type ="file", lang = "english",
min.freq = 1,  max.words = 200)
# RdBu color palette
res<-rquery.wordcloud(filePath, type ="file", lang = "english",
colorPalette = "RdBu")
wordcloud2(data=df, size=1.6, color='random-dark')
wordcloud2(data=d, size=1.6, color='random-dark')
wordcloud2(data=d, size=1.6, color='random-dark')
library(wordcloud2)
wordcloud2(data=d, size=1.6, color='random-dark')
View(d)
View(d)
d1 <- mutate(d, freq >= 4)
d1 <- mutate(d, freq = freq >= 4)
d1 <- mutate(d, freq = freq >= 4)
library("dplyr")
d1 <- mutate(d, freq = freq >= 4)
head(d1, 10)
wordcloud2(data=d1, size=1.6, color='random-dark')
wordcloud(words = d1$word, freq = d1$freq, min.freq = 1,
max.words=200, random.order=FALSE, rot.per=0.35,
colors=brewer.pal(8, "Dark2"))
d1 <- mutate(d, freq = freq >= 3)
head(d1, 10)
# RdBu color palette
res<-rquery.wordcloud(filePath, type ="file", lang = "english",
colorPalette = "RdBu")
wordcloud(words = d1$word, freq = d1$freq, min.freq = 1,
max.words=200, random.order=FALSE, rot.per=0.35,
colors=brewer.pal(8, "Dark2"))
d1 <- mutate(d, freq = freq >= 2)
d1 <- mutate(d, freq = freq >= 3)
View(d1)
d1 <- mutate(d, freq1 = freq >= 3)
View(d1)
d1 <- filter(d, freq = freq >= 3)
d1 <- filter(d, freq >= 3)
head(d1, 10)
wordcloud(words = d1$word, freq = d1$freq, min.freq = 1,
max.words=200, random.order=FALSE, rot.per=0.35,
colors=brewer.pal(8, "Dark2"))
# RdBu color palette
res<-rquery.wordcloud(filePath, type ="file", lang = "english",
colorPalette = "RdBu")
d1 <- filter(d, freq >= 7)
wordcloud(words = d1$word, freq = d1$freq, min.freq = 1,
max.words=200, random.order=FALSE, rot.per=0.35,
colors=brewer.pal(8, "Dark2"))
# RdBu color palette
res<-rquery.wordcloud(filePath, type ="file", lang = "english",
colorPalette = "RdBu")
wordcloud(words = d1$word, freq = d1$freq, min.freq = 1,
max.words=200, random.order=FALSE, rot.per=0.35,
colors=brewer.pal(8, "Dark2"))
d1 <- filter(d, freq >= 10)
set.seed(1234)
wordcloud(words = d1$word, freq = d1$freq, min.freq = 1,
max.words=200, random.order=FALSE, rot.per=0.35,
colors=brewer.pal(8, "Dark2"))
d1 <- filter(d, freq >= 20)
set.seed(1234)
wordcloud(words = d1$word, freq = d1$freq, min.freq = 1,
max.words=200, random.order=FALSE, rot.per=0.35,
colors=brewer.pal(8, "Dark2"))
View(d1)
d1 <- filter(d1, word != "figure")
set.seed(1234)
wordcloud(words = d1$word, freq = d1$freq, min.freq = 1,
max.words=200, random.order=FALSE, rot.per=0.35,
colors=brewer.pal(8, "Dark2"))
wordcloud(words = d1$word, freq = d1$freq, min.freq = 10,
max.words=200, random.order=FALSE, rot.per=0.35,
colors=brewer.pal(8, "Dark2"))
d1 <- filter(d1, word != "concerning")
wordcloud(words = d1$word, freq = d1$freq, min.freq = 10,
max.words=200, random.order=FALSE, rot.per=0.35,
colors=brewer.pal(8, "Dark2"))
install.packages("rmdformats")
library(knitr)
library(rmdformats)
## Global options
options(max.print="75")
opts_chunk$set(echo=FALSE,
cache=TRUE,
prompt=FALSE,
tidy=TRUE,
comment=NA,
message=FALSE,
warning=FALSE)
opts_knit$set(width=75)
install.packages("hugo")
devtools::install_github("r-lib/hugodown")
devtools::install_github("r-lib/hugodown")
devtools::install_github("r-lib/hugodown")
devtools::install_github("INWTlab/ireports")
devtools::install_github("INWTlab/ireports")
install.packages(installr)
install.packages("installr")
devtools::install_github("INWTlab/ireports")
installr::uninstall.packages("rlang")
install.packages("rlang")
install.packages("rlang")
devtools::install_github("INWTlab/ireports")
devtools::install_github("r-lib/hugodown")
devtools::install_github("r-lib/hugodown")
devtools::install_github("r-lib/hugodown")
devtools::install_github("r-lib/hugodown")
usethis::browse_github_pat()
usethis::edit_r_environ()
devtools::install_github("r-lib/hugodown")
usethis::browse_github_pat()
usethis::browse_github_pat()
usethis::browse_github_pat()
usethis::edit_r_environ()
usethis::edit_r_environ()
usethis::browse_github_pat()
devtools::install_github("r-lib/hugodown")
install.packages("blogdown")
blogdown::install_hugo()
setwd("F:/Google Drive/17_sites")
setwd("F:/Google Drive/17_sites/teste")
hugodown::create_site_academic()
hugodown::hugo_start()
hugodown::create_site_academic()
hugodown::hugo_build()
setwd("F:/Google Drive/17_sites/ere")
hugodown::create_site_academic()
hugodown::create_site_academic()
file.create("static/.nojekyll")
hugodown::hugo_build()
hugodown::create_site_academic()
setwd("F:/Google Drive/17_sites/ere_site")
hugodown::create_site_academic()
hugodown::hugo_build()
hugodown::hugo_start()
setwd("F:/Google Drive/17_sites/ah")
hugodown::create_site_academic()
